#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>
#include <string.h>

void* threadCount()
{
	printf("[Thread1] Waiting I'm Working ...\n");
	FILE* threadfile;
	threadfile = fopen("randomNum.dat","w");
	if(threadfile == NULL)
	{
		printf("[Thread1] Sorry, File has Error!!\n");
		return NULL;
	}
	for(int i = 0; i < 100000000; i++)
	{
		fprintf(threadfile,"%d\n",i+1);
	}
	fclose(threadfile);
	printf("[Thread1] Okay! I'm done...\n");
	pthread_exit(NULL);
}

void* threadRead()
{
	int total = 0;
	int start = 1;
	int count = 0;
	char buf[257];
	//char* token = NULL;
	printf("[Thread2] Waiting I'm Working...\n");
	FILE* threadfile;
	threadfile = fopen("randomNum.dat","r+");
	if(threadfile == NULL)
	{
		printf("[Thread2] Sorry, File has Error!!\n");
		return NULL;
	}
	while(!feof(threadfile))
	{
		fgets(buf,sizeof(buf),threadfile);
		if(strlen(buf)==0) break;
		if(start % 2 == 1 && buf != NULL)
		{	
			count++;	
		}
		start++;
		buf[0] = '\0';
	}
	printf("[Thread2] Odd Count = %d\n",count);
	fclose(threadfile);
	
	threadfile = fopen("randomNum.dat","r+");
	if(threadfile == NULL)
	{
		printf("[Thread2] Sorry, File has Error!!\n");
		return NULL;
	}
	total = 0;
	start = 1;
	count = 0;
	buf[0] = '\0';
	while(!feof(threadfile))
	{
		total++;
		fgets(buf,sizeof(buf),threadfile);
		if(strlen(buf) == 0) break;
		if(total % 2 == 0)
		{
			count++;
		}
		buf[0] = '\0';
	}
	fclose(threadfile);
	printf("[Thread2] Even Count = %d\n",count);
	printf("[Thread2] Okay! I'm done...\n");
	pthread_exit(NULL);
}


int main()
{
	pthread_t thread_id1, thread_id2;
	printf("[Main] Making Thread1...\n");
	pthread_create(&thread_id1,NULL,threadCount,NULL);
	printf("[Main] Wait Thread1 Working Now...\n");
	pthread_join(thread_id1,NULL);
	printf("[Main] Thread1 End...\n");
	printf("[Main] Making Thread2...\n");
	pthread_create(&thread_id2,NULL,threadRead,NULL);
	printf("[Main] Wait Thread2 Working Now...\n");
	pthread_join(thread_id2,NULL);
	printf("[Main] Thread2 End...\n");
	printf("[Main] Thank you for waiting our work...\n");
	pthread_exit(NULL);
	return 0;
}
